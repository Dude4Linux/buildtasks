#!/bin/bash -e

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $(basename $0) [--publish] [--gen-profile] appname
Perform bugfix release for appliance appname (e.g., core)

Options::

    --publish           - if set, iso and meta files will be published
    --gen-profile       - if set, tklbam profile will be generated

Environment::

    BT_VERSION          - appliance version (e.g., 11.2-lucid-x86)

    BT_PUBLISH_IMGS     - rsync destination for release image
    BT_PUBLISH_META     - rsync destination for release meta files
    BT_PUBLISH_PROFILES - rsync destination for release tklbam profile

    BT_PROFILES         - path containing tklbam profile conf files

    BT_DEBUG            - turn on debugging

Bugfix patch::

    patches/bugfix-releases/BT_VERSION
EOF
exit 1
}

while [ "$1" != "" ]; do
    case $1 in
        --help )       usage;;
        --publish)     publish="yes";;
        --gen-profile) gen_profile="yes";;
        *)             if [ -n "$appname" ]; then usage; else appname=$1; fi ;;
    esac
    shift
done

[ -n "$appname" ] || usage
[ -n "$publish" ] || warning "--publish was not specified"
[ -n "$gen_profile" ] || warning "--gen_profile was not specified"

[ -n "$BT_DEBUG" ] && set -x

export BT=$(dirname $(readlink -f $0))
export BT_CONFIG=$BT/config
. $BT_CONFIG/common.cfg
. $BT_CONFIG/build.cfg

O=$BT_BUILDS/iso
mkdir -p $O

[ -n "$BT_VERSION" ] || fatal "BT_VERSION not set"

if [ "$gen_profile" == "yes" ]; then
    [ -n "$BT_PROFILES" ] || fatal "BT_PROFILES not set"
    export PROFILES_CONF=$BT_PROFILES
fi

if [ "$publish" == "yes" ]; then
    [ -n "$BT_PUBLISH_IMGS" ] || fatal "BT_PUBLISH_IMGS not set"
    [ -n "$BT_PUBLISH_META" ] || fatal "BT_PUBLISH_META not set"

    if [ "$gen_profile" == "yes" ]; then
        [ -n "$BT_PUBLISH_PROFILES" ] || fatal "BT_PUBLISH_PROFILES not set"
    fi
fi

isofile=turnkey-$appname-$BT_VERSION.iso
name=turnkey-$appname-$BT_VERSION
rootfs=$name.rootfs
cdroot=$name.cdroot

bugfix_patch=$BT/patches/bugfix-releases/$BT_VERSION
[ -d $bugfix_patch ] || fatal "$bugfix_patch not found"

if [ ! -e "$BT_PROFILES/$appname" ]; then
    warning "$BT_PROFILES/$appname does not exist, skipping profile generation"
fi

$BT/bin/iso-download $BT_ISOS $BT_VERSION $appname
$BT/bin/iso-verify $BT_ISOS $BT_VERSION $appname

cd $O
tklpatch-extract-iso $BT_ISOS/$isofile

tklpatch-apply $rootfs $bugfix_patch/common
[ -d $bugfix_patch/$appname ] && tklpatch-apply $rootfs $bugfix_patch/$appname

$BT/bin/generate-manifest $rootfs > $O/$name.manifest

if [ "$gen_profile" == "yes" ]; then
    if [ -e "$BT_PROFILES/$appname" ]; then
        mkdir -p $O/$name.tklbam
        $BT/bin/generate-tklbam-profile $rootfs $O/$name.tklbam
    fi
fi

tklpatch-prepare-cdroot $rootfs $cdroot
TKLPATCH_ISOLABEL=$appname tklpatch-geniso $cdroot $O/$name.iso

$BT/bin/generate-signature $O/$name.iso

# hardlink iso and sig to isos (followup builds)
mkdir -p $BT_ISOS/pre-patch
mv $BT_ISOS/$isofile $BT_ISOS/$isofile.sig $BT_ISOS/pre-patch/
ln $O/$name.iso $BT_ISOS/
ln $O/$name.iso.sig $BT_ISOS/

# publish if specified
if [ "$publish" == "yes" ]; then
    export PUBLISH_DEST=${BT_PUBLISH_IMGS}/iso/
    $BT/bin/publish-files $O/$name.{iso,iso.sig}

    export PUBLISH_DEST=${BT_PUBLISH_META}/iso/
    $BT/bin/publish-files $O/$name.{manifest,iso.sig}

    if [ "$gen_profile" == "yes" ]; then
        if [ -e "$BT_PROFILES/$appname" ]; then
            export PUBLISH_DEST=$BT_PUBLISH_PROFILES
            $BT/bin/publish-files $O/$name.tklbam/*.tar.gz
        fi
    fi
fi

# cleanup unless BT_DEBUG
if [ -z "$BT_DEBUG" ] && ! (mount | grep -q $(basename $rootfs)); then
    rm -rf $rootfs
    rm -rf $cdroot
fi


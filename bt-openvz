#!/bin/bash -e
# depends: https://github.com/livenson/pfff.git

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $(basename $0) [--publish] appname
Converts appliance appname (e.g., core) to openvz

Options::

    --publish           - if set, image and meta files will be published

Environment::

    BT_DEBUG            - turn on debugging
EOF
exit 1
}

while [ "$1" != "" ]; do
    case $1 in
        --help|-h )  usage;;
        --publish)   publish="yes";;
        *)           if [ -n "$appname" ]; then usage; else appname=$1; fi ;;
    esac
    shift
done

[ -n "$appname" ] || usage
[ -n "$publish" ] || warning "--publish was not specified"

# install pfff (will be removed once build masters updated)
if ! $(which pfff >/dev/null); then
    apt-get -y install cmake
    git clone https://github.com/livenson/pfff.git /usr/local/src/pfff
    mkdir /usr/local/src/pfff/build
    cd /usr/local/src/pfff/build
    cmake ..
    make
    make tests
    make install
fi

[ -n "$BT_DEBUG" ] && set -x

export BT=$(dirname $(readlink -f $0))
export BT_CONFIG=$BT/config
. $BT_CONFIG/common.cfg
. $BT_CONFIG/build.cfg

export ARCHITECTURE=$(dpkg --print-architecture)

O=$BT_BUILDS/openvz
mkdir -p $O

[ -n "$BT_VERSION" ] || fatal "BT_VERSION not set"

if [ "$publish" == "yes" ]; then
    [ -n "$BT_PUBLISH_IMGS" ] || fatal "BT_PUBLISH_IMGS not set"
    [ -n "$BT_PUBLISH_META" ] || fatal "BT_PUBLISH_META not set"
fi

case "$appname" in
    canvas)           export ON_MEMORY=0.50 ;;
    gitlab)           export ON_MEMORY=0.50 ;;
    jenkins)          export ON_MEMORY=0.50 ;;
    clipbucket)       export ON_MEMORY=0.50 ;;
    tkldev)           export ON_MEMORY=0.50 ;;
    moodle)           export ON_MEMORY=0.33 ;;
    tomcat-apache)    export ON_MEMORY=0.33 ;;
    appengine-java)   export ON_MEMORY=0.33 ;;
    *)                export ON_MEMORY=0.25 ;;
esac

isofile=turnkey-$appname-$BT_VERSION.iso
name=turnkey-$appname-$BT_VERSION
rootfs=$name.rootfs
cdroot=$name.cdroot

if $(echo $BT_VERSION | grep -q squeeze); then debianversion="debian-6"; fi
if $(echo $BT_VERSION | grep -q wheezy); then debianversion="debian-7"; fi
[ -n "$debianversion" ] || fatal "debianversion could not be determined"

$BT/bin/iso-download $BT_ISOS $BT_VERSION $appname
$BT/bin/iso-verify $BT_ISOS $BT_VERSION $appname

cd $O
tklpatch-extract-iso $BT_ISOS/$isofile

tklpatch-apply $rootfs $BT/patches/headless
tklpatch-apply $rootfs $BT/patches/openvz
$BT/bin/rootfs-cleanup $rootfs

$BT/bin/aptconf-tag $rootfs openvz

# bundle openvz tarball using stupid naming convention
appversion=$(echo $BT_VERSION | cut -d "-" -f 1)
stupidname="${debianversion}-turnkey-${appname}_${appversion}-1_${ARCHITECTURE}"
info "creating $stupidname.tar.gz"
tar -C $rootfs -zcf $stupidname.tar.gz .

$BT/bin/generate-signature $O/$stupidname.tar.gz

# generate opennode ovf and bundle
$BT/bin/generate-opennode-ovf $O/$stupidname.tar.gz > $stupidname.ovf
tar -cf $stupidname.ova $stupidname.ovf $stupidname.tar.gz

$BT/bin/generate-signature $O/$stupidname.ova
pfff -k 6996807 -B $stupidname.ova > $stupidname.ova.pfff

# publish if specified
if [ "$publish" == "yes" ]; then
    export PUBLISH_DEST=${BT_PUBLISH_IMGS}/openvz/
    $BT/bin/publish-files $O/$stupidname.{tar.gz,tar.gz.sig}

    export PUBLISH_DEST=${BT_PUBLISH_META}/turnkey-$appname/$BT_VERSION/
    $BT/bin/publish-files $O/$stupidname.tar.gz.sig

    export PUBLISH_DEST=${BT_PUBLISH_IMGS}/opennode/
    $BT/bin/publish-files $O/$stupidname.{ova,ova.sig,ova.pfff}

    export PUBLISH_DEST=${BT_PUBLISH_META}/turnkey-$appname/$BT_VERSION/
    $BT/bin/publish-files $O/$stupidname.ova.sig
fi

if [ -z "$BT_DEBUG" ] && ! (mount | grep -q $(basename $rootfs)); then
    rm -rf $rootfs
    rm -rf $cdroot
fi


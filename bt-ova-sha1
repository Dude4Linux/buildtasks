#!/bin/bash -e

# script to reprocess existing v14.2 OVAs so that they only contain
# a SHA1 checksum. SHA256 checksums were problematic for some users
# of older VMware products. As we are hashing the OVA itself with
# SHA256 (and signing the hashfile) there is no security issues (so
# long as users check the sig of the hashfile and check the SHA256
# sums of the OVA itself).

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }


ova-download() {
    outdir=$1
    ovafile=$2

    if [ -e $outdir/$ovafile ]; then
        info "$ovafile already exists, skipping..."
        return 0
    fi

    mkdir -p $outdir
    images="http://mirror.turnkeylinux.org/turnkeylinux/images"
    wget --read-timeout=60 --tries=10 $images/ova/$ovafile -O $outdir/$ovafile
}

ova-verify() {
    outdir=$1
    appver=$2
    appname=$3
    appversion=$4
    codename=$5
    arch=$6

    hashfile=turnkey-$appver.ova.hash
    hashpath=$outdir/$hashfile

    if [ ! -e $hashpath ]; then
        src=http://releases.turnkeylinux.org/turnkey-$appname/$appversion-$codename-$arch/$hashfile
        wget --read-timeout=60 --tries=10 $src -O $hashpath
    else
        info "$hashfile already exists, skipping..."
        return 0
    fi

    if ! $BT/bin/signature-verify $outdir/$ovafile $hashpath; then
        mv $outdir/$ovafile $outdir/$ovafile.corrupt
        rm $hashpath
        fatal "$hashfile verification failed"
    fi
}

[ -n "$1" ] || fatal "must supply appver"
appver=$1
[ -n "$BT_DEBUG" ] && set -x
which ovftool > /dev/null || fatal "ovftool not found"

export BT=$(dirname $(readlink -f $0))
export BT_CONFIG=$BT/config
. $BT_CONFIG/common.cfg

ovas=$BT_BUILDS/vm
TMP=$ovas/tmp
mkdir -p $TMP

[ -n "$BT_PUBLISH_IMGS" ] || fatal "BT_PUBLISH_IMGS not set"
[ -n "$BT_PUBLISH_META" ] || fatal "BT_PUBLISH_META not set"
[ -n "$BT_GPGKEY" ] || fatal "BT_GPGKEY not set"

ovafile=turnkey-$appver.ova
ovffile=$appver.ovf

parsed_appname_version=$($BT/bin/parse-appname-version $appver)
read appname appversion codename arch <<< "$parsed_appname_version"

ova-download $TMP $ovafile
ova-verify $TMP $appver $appname $appversion $codename $arch

ovftool $TMP/$ovafile $TMP/$ovffile

cp $BT/templates/ovf-productinfo $TMP/productinfo.tmp

cd $TMP
sed -i "s|@@APP@@|$appname|; \
        s|@@VERSION@@|$appversion|; \
        s|@@FULL_VERSION@@|$appver|; \
        s|@@URL@@|https://www.turnkeylinux.org/$appname| \
        " productinfo.tmp

sed -e "/<\/Name>/r./productinfo.tmp" $ovffile > turnkey-$ovffile
cd -

rm $TMP/*.mf
ovftool --shaAlgorithm=SHA1 $TMP/turnkey-$ovffile $ovas/$ovafile

$BT/bin/generate-signature $ovas/$ovafile
$BT/bin/generate-buildenv vm $TMP/$ovafile.hash > $ovas/$ovafile.buildenv

export PUBLISH_DEST=${BT_PUBLISH_IMGS}/ova/
$BT/bin/publish-files $ovas/$ovafile

export PUBLISH_DEST=${BT_PUBLISH_META}/
$BT/bin/publish-files $ovas/$ovafile.{hash,buildenv}

if [ -z "$BT_DEBUG" ]; then
    rm -rf $TMP
fi

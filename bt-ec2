#!/bin/bash -e

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $(basename $0) [ --options ] appname
Converts appliance appname (e.g., core) to ec2 ami's

Options::

    --backed=(s3|ebs)   - if not set, both s3 and ebs will be built
    --copy              - if set, image will be copied to all other regions
    --publish           - if set, image will be made public
    --secupdates        - if set, security updates will be installed

Environment::

    BT_DEBUG            - turn on debugging
EOF
exit 1
}

backed_opts=""
while [ "$1" != "" ]; do
    case $1 in
        --help|-h )    usage;;
        --backed=s3)   backed_s3="yes";;
        --backed=ebs)  backed_ebs="yes";;
        --copy)        backed_opts+="--copy ";;
        --publish)     backed_opts+="--publish ";;
        --secupdates)  secupdates="yes";;
        *)             if [ -n "$appname" ]; then usage; else appname=$1; fi ;;
    esac
    shift
done

[ -n "$appname" ] || usage
[ -n "$secupdates" ] || warning "--secupdates was not specified"

if [ -z "${backed_s3}${backed_ebs}" ]; then
    backed_s3="yes"
    backed_ebs="yes"
fi

[ -n "$BT_DEBUG" ] && set -x

export BT=$(dirname $(readlink -f $0))
export BT_CONFIG=$BT/config
. $BT_CONFIG/common.cfg
. $BT_CONFIG/build.cfg

[ -n "$BT_VERSION" ] || fatal "BT_VERSION not set"

O=$BT_BUILDS/ec2
mkdir -p $O

name=turnkey-$appname-$BT_VERSION
rootfs=$name.rootfs
cdroot=$name.cdroot
isofile=$name.iso

$BT/bin/iso-download $BT_ISOS $BT_VERSION $appname
$BT/bin/iso-verify $BT_ISOS $BT_VERSION $appname

cd $O
tklpatch-extract-iso $BT_ISOS/$isofile

tklpatch-apply $rootfs $BT/patches/headless
tklpatch-apply $rootfs $BT/patches/cloud

mount -o bind /dev $rootfs/dev
tklpatch-apply $rootfs $BT/patches/ec2

[ "$secupdates" == "yes" ] && tklpatch-apply $rootfs $BT/patches/secupdates
umount -l $rootfs/dev

$BT/bin/rootfs-cleanup $rootfs

if [ "$backed_ebs" == "yes" ]; then
    $BT/bin/aptconf-tag $rootfs ebs
    $BT/bin/ec2/ebs.py $backed_opts $rootfs
fi

if [ "$backed_s3" == "yes" ]; then
    $BT/bin/aptconf-tag $rootfs s3
    $BT/bin/ec2/s3.py $backed_opts $rootfs
fi

if [ -z "$BT_DEBUG" ] && ! (mount | grep -q $(basename $rootfs)); then
    rm -rf $rootfs
    rm -rf $cdroot
fi


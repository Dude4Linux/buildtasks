#!/bin/bash -e
# Copyright (c) 2011-2015 TurnKey GNU/Linux - http://www.turnkeylinux.org
# 
# This file is part of buildtasks.
# 
# Buildtasks is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.


fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $(basename $0) [ --options ] appname
Converts appliance appname (e.g., core) to EC2 EBS-backed AMIs

Options::

    --virt=hvm|pvm      - build image for virtualization type (default: hvm)
    --secupdates        - install security updates before building image
    --copy              - if set, image will be copied to all other regions
    --publish           - if set, image will be made public
    --marketplace       - if set, image will be shared for marketplace

Environment::

    BT_DEBUG            - turn on debugging
EOF
exit 1
}

virt="hvm"
backed_opts=""
while [ "$1" != "" ]; do
    case $1 in
        --help|-h)     usage;;
        --virt=hvm)    virt="hvm";;
        --virt=pvm)    virt="pvm";;
        --copy)        backed_opts+="--copy ";;
        --publish)     backed_opts+="--publish ";;
        --marketplace) backed_opts+="--marketplace ";;
        --secupdates)  secupdates="yes";;
        *)             if [ -n "$appname" ]; then usage; else appname=$1; fi ;;
    esac
    shift
done

case $virt in
    hvm)    backed_opts+="--virt=hvm ";;
    pvm)    backed_opts+="--virt=pvm ";;
    *)      fatal "virtualization type not supported: $virt";;
esac

[ -n "$appname" ] || usage
[ -n "$secupdates" ] || warning "--secupdates was not specified"

[ -n "$BT_DEBUG" ] && set -x

export BT=$(dirname $(readlink -f $0))
export BT_CONFIG=$BT/config
. $BT_CONFIG/common.cfg
. $BT_CONFIG/build.cfg
. $BT_CONFIG/aws.cfg

[ -n "$BT_VERSION" ] || fatal "BT_VERSION not set"

O=$BT_BUILDS/ec2
mkdir -p $O

name=turnkey-$appname-$BT_VERSION
rootfs=$name.rootfs
cdroot=$name.cdroot
isofile=$name.iso

$BT/bin/iso-download $BT_ISOS $BT_VERSION $appname
$BT/bin/iso-verify $BT_ISOS $BT_VERSION $appname

cd $O
tklpatch-extract-iso $BT_ISOS/$isofile

function _cleanup() {
    umount -l $rootfs/dev || true
    umount -l $rootfs/proc || true

    if [ -z "$BT_DEBUG" ] && ! (mount | grep -q $(basename $rootfs)); then
        rm -rf $rootfs
        rm -rf $cdroot
    fi
}

trap _cleanup INT TERM EXIT

mount --bind --make-rslave /dev $rootfs/dev

tklpatch-apply $rootfs $BT/patches/headless
tklpatch-apply $rootfs $BT/patches/cloud
tklpatch-apply $rootfs $BT/patches/ec2/common

case $virt in
    hvm)    tklpatch-apply $rootfs $BT/patches/ec2/hvm;;
    pvm)    tklpatch-apply $rootfs $BT/patches/ec2/pvm;;
esac

[ "$secupdates" == "yes" ] && tklpatch-apply $rootfs $BT/patches/secupdates

umount -l $rootfs/dev
$BT/bin/rootfs-cleanup $rootfs

$BT/bin/aptconf-tag $rootfs $virt
$BT/bin/ec2/ebs.py $backed_opts $rootfs

#!/bin/bash -e

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
warning() { echo "WARNING [$(basename $0)]: $@"; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $(basename $0) < required > [ optional ] appname
Converts appliance appname (e.g., core) to ec2 s3/ebs backed ami's

Required (one or more build types must be specified)::

    --s3                - build s3 backed ami
    --ebs               - build ebs backed ami
    --s3-migrate        - build s3 backed ami and migrate to other regions
    --ebs-migrate       - build ebs backed ami and migrate to other regions

Optional::

    --publish           - if set, image will be made public
    --secupdates        - if set, security updates will be installed

Environment::

    BT_VERSION          - appliance version (e.g., 11.2-lucid-x86)

    BT_DEBUG            - turn on debugging
EOF
exit 1
}

while [ "$1" != "" ]; do
    case $1 in
        --help|-h )    usage;;
        --s3)          s3_backed="yes";;
        --ebs)         ebs_backed="yes";;
        --s3-migrate)  s3_backed="yes"; s3_migrate="yes";;
        --ebs-migrate) ebs_backed="yes"; ebs_migrate="yes";;
        --publish)     publish="yes";;
        --secupdates)  secupdates="yes";;
        *)             if [ -n "$appname" ]; then usage; else appname=$1; fi ;;
    esac
    shift
done

[ -n "$appname" ] || usage
[[ -n "$s3_backed" || -n "$ebs_backed" ]] || fatal "s3 and/or ebs not specified"

[ -n "$publish" ] || warning "--publish was not specified"
[ -n "$secupdates" ] || warning "--secupdates was not specified"

[ -n "$BT_DEBUG" ] && set -x

export BT=$(dirname $(readlink -f $0))
export BT_CONFIG=$BT/config
. $BT_CONFIG/common.cfg
. $BT_CONFIG/build.cfg
. $BT_CONFIG/ec2.cfg

export ZONE=$(ec2metadata --availability-zone)
export REGION=$(echo -n $ZONE | head -c -1)
export BUCKET=turnkeylinux-$REGION
export ARCHITECTURE=$(dpkg --print-architecture)
export KERNEL=$($BT/bin/ec2-kernel $REGION $ARCHITECTURE)

O=$BT_BUILDS/ec2
mkdir -p $O

[ -n "$BT_VERSION" ] || fatal "BT_VERSION not set"

isofile=turnkey-$appname-$BT_VERSION.iso
name=turnkey-$appname-$BT_VERSION
rootfs=$name.rootfs
cdroot=$name.cdroot

$BT/bin/iso-download $BT_ISOS $BT_VERSION $appname
$BT/bin/iso-verify $BT_ISOS $BT_VERSION $appname

cd $O
tklpatch-extract-iso $BT_ISOS/$isofile

tklpatch-apply $rootfs $BT/patches/headless
tklpatch-apply $rootfs $BT/patches/cloud
tklpatch-apply $rootfs $BT/patches/ec2
[ "$secupdates" == "yes" ] && tklpatch-apply $rootfs $BT/patches/secupdates
$BT/bin/rootfs-cleanup $rootfs

if [ "$s3_backed" == "yes" ]; then
    ami_name=$($BT/bin/ec2-uniquename $name.s3)
    $BT/bin/aptconf-tag $rootfs s3
    $BT/bin/s3-bundle $rootfs $ami_name
    $BT/bin/s3-register $ami_name
    [ "$publish" == "yes" ] && $BT/bin/s3-publish $ami_name

    if [ "$s3_migrate" == "yes" ]; then
        region_src=$REGION
        bucket_src=turnkeylinux-$REGION
        for region_dst in $(echo $ALL_REGIONS | sed "s|$src_region||"); do
            export REGION=$region_dst
            export BUCKET=turnkeylinux-$REGION
            export KERNEL=$($BT/bin/ec2-kernel $region_dst $ARCHITECTURE)
            $BT/bin/s3-migrate $region_src $region_dst $ami_name
            $BT/bin/s3-register $ami_name
            [ "$publish" == "yes" ] && $BT/bin/s3-publish $ami_name
        done
        export REGION=$region_src
    fi
fi

if [ "$ebs_backed" == "yes" ]; then
    snapshot_name=$($BT/bin/ec2-uniquename $name.ebs)
    $BT/bin/aptconf-tag $rootfs ebs
    $BT/bin/ebs-bundle $rootfs $snapshot_name
    $BT/bin/ebs-register $snapshot_name
    [ "$publish" == "yes" ] && $BT/bin/ebs-publish $snapshot_name

    if [ "$ebs_migrate" == "yes" ]; then
        region_src=$REGION
        for region_dst in $(echo $ALL_REGIONS | sed "s|$src_region||"); do
            export REGION=$region_dst
            export KERNEL=$($BT/bin/ec2-kernel $region_dst $ARCHITECTURE)
            $BT/bin/ebs-migrate $region_src $region_dst $snapshot_name
            $BT/bin/ebs-register $snapshot_name
            [ "$publish" == "yes" ] && $BT/bin/ebs-publish $snapshot_name
        done
        export REGION=$region_src
    fi
fi

if [ -z "$BT_DEBUG" ] && ! (mount | grep -q $(basename $rootfs)); then
    rm -rf $rootfs
    rm -rf $cdroot
fi


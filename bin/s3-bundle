#!/bin/bash -e
# depends on ec2-ami-tools

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $0 rootfs ami_name
Bundles rootfs into an s3 ami and uploads

Arguments::

    rootfs          - root filesystem path
    ami_name        - name of the ami to create

Environment::

    REGION          - Amazon region ($REGION)
    KERNEL          - Amazon kernel ID ($KERNEL)
    BUCKET          - Bucket to store AMI ($BUCKET)
    ARCHITECTURE    - Architecture ($ARCHITECTURE)
    AWS_USERID      - Amazon user id without dashes ($AWS_USERID)
    AWS_ACCESSKEY   - Amazon s3 access key ($AWS_ACCESSKEY)
    AWS_SECRETKEY   - Amazon s3 secret key ($AWS_SECRETKEY)
    EC2_CERT        - Amazon X509 certificate path ($EC2_CERT)
    EC2_PRIVATE_KEY - Amazon X509 private-key path ($EC2_PRIVATE_KEY)
EOF
exit 1
}

if [[ "$#" != "2" ]]; then
    usage
fi

rootfs=$1
ami_name=$2

[ -n "$REGION" ] || fatal "REGION not set"
[ -n "$KERNEL" ] || fatal "KERNEL not set"
[ -n "$BUCKET" ] || fatal "BUCKET not set"
[ -n "$ARCHITECTURE" ] || fatal "ARCHITECTURE not set"
[ -n "$AWS_USERID" ] || fatal "AWS_USERID not set"
[ -n "$AWS_ACCESSKEY" ] || fatal "AWS_ACCESSKEY not set"
[ -n "$AWS_SECRETKEY" ] || fatal "AWS_SECRETKEY not set"
[ -f "$EC2_CERT" ] || fatal "EC2_CERT not set or does not exist"
[ -f "$EC2_PRIVATE_KEY" ] || fatal "EC2_PRIVATE_KEY not set or does not exist"

case "$REGION" in
    "us-east-1") export location="US" ;;
    "eu-west-1") export location="EU" ;;
    *)           export location=$REGION ;;
esac

info "creating sparse loopback filesystem"
dd if=/dev/null of=$rootfs.img bs=1 seek=10G
mkfs.ext4 -F -j $rootfs.img

mkdir $rootfs.img.mount
mount -o loop $rootfs.img $rootfs.img.mount

info "syncing rootfs to loopback"
rsync -a -t -r -S -I -H $rootfs/ $rootfs.img.mount

info "umount loopback"
umount -d $rootfs.img.mount
rmdir $rootfs.img.mount

info "bundling converted filesystem into ami image ($ami_name)"
ec2-bundle-image \
    --cert $EC2_CERT --privatekey $EC2_PRIVATE_KEY \
    --user $AWS_USERID --image $rootfs.img --destination $(dirname $rootfs)/ \
    --arch $ARCHITECTURE --kernel $KERNEL --prefix $ami_name

info "removing loopback"
rm $rootfs.img

info "uploading bundled ami ($BUCKET/$ami_name.manifest.xml)"
ec2-upload-bundle --batch --retry \
    --access-key $AWS_ACCESSKEY --secret-key $AWS_SECRETKEY \
    --bucket $BUCKET --manifest $ami_name.manifest.xml --location $location


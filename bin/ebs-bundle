#!/bin/bash -e
# depends on ec2-ami-tools

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $0 rootfs snapshot_name
Bundles rootfs into a new ebs volume snapshot

Arguments::

    rootfs          - root filesystem path
    snapshot_name   - name of snapshot

Environment::

    ZONE            - Amazon region zone ($ZONE)
    REGION          - Amazon region ($REGION)
    EC2_CERT        - Amazon X509 certificate path ($EC2_CERT)
    EC2_PRIVATE_KEY - Amazon X509 private-key path ($EC2_PRIVATE_KEY)

EOF
exit 1
}

if [[ "$#" != "2" ]]; then
    usage
fi

[ -n "$ZONE" ] || fatal "ZONE not set"
[ -n "$REGION" ] || fatal "REGION not set"
[ -f "$EC2_CERT" ] || fatal "EC2_CERT not set or does not exist"
[ -f "$EC2_PRIVATE_KEY" ] || fatal "EC2_PRIVATE_KEY not set or does not exist"

rootfs=$1
snapshot_name=$2

DEVICE="/dev/sdi"
INSTANCEID=$(ec2metadata --instance-id)

info "creating ebs volume"
VOLUMEID=$(ec2-create-volume --size 10 --region $REGION --availability-zone $ZONE | cut -f2)

info "attaching ebs volume"
ec2-attach-volume --device $DEVICE --region $REGION --instance $INSTANCEID $VOLUMEID
while [ ! -e $DEVICE ]; do echo -n .; sleep 1; done

info "formatting ebs volume and mounting"
mkfs.ext4 -F -j $DEVICE
mkdir -p $rootfs.ebs.mount
mount $DEVICE $rootfs.ebs.mount

info "syncing rootfs to ebs volume"
rsync -a -t -r -S -I -H $rootfs/ $rootfs.ebs.mount

info "umounting and detaching ebs volume"
umount -d $rootfs.ebs.mount
rmdir $rootfs.ebs.mount
ec2-detach-volume --region $REGION $VOLUMEID

info "creating snapshot"
SNAPSHOTID=$(ec2-create-snapshot --description "$snapshot_name" --region $REGION $VOLUMEID | cut -f2)
while ec2-describe-snapshots --region $REGION $SNAPSHOTID | grep -q pending
  do echo -n .; sleep 3; done

info "deleting ebs volume"
ec2-delete-volume --region $REGION $VOLUMEID


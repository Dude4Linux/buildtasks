#!/bin/bash -e

fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $(basename $0) appname
Perform maintenance release for appliance appname (e.g., core)

Environment::

    BT_CUR_VERSION      - current appliance version (e.g., 11.1-lucid-x86)
    BT_NEW_VERSION      - new appliance version (e.g., 11.2-lucid-x86)

    BT_PUBLISH          - if set, iso and meta files will be published
    BT_PUBLISH_IMGS     - rsync destination for release image
    BT_PUBLISH_META     - rsync destination for release meta files
    BT_PUBLISH_PROFILES - rsync destination for release tklbam profile

    BT_PROFILES         - path containing tklbam profile conf files

    BT_DEBUG            - turn on debugging

Maintenance patch::

    patches/maintenance-releases/BT_NEW_VERSION

    for more details see: bin/generate-app-patch
EOF
exit 1
}

if [[ "$#" != "1" ]]; then
    usage
fi

[ -n "$BT_DEBUG" ] && set -x

export BT=$(dirname `pwd`/$(basename $0))
export BT_CONFIG=$BT/config
. $BT_CONFIG/common.cfg
. $BT_CONFIG/build.cfg

O=$BT_BUILDS/iso
mkdir -p $O

appname=$1

[ -n "$BT_CUR_VERSION" ] || fatal "BT_CUR_VERSION not set"
[ -n "$BT_NEW_VERSION" ] || fatal "BT_NEW_VERSION not set"

[ -n "$BT_PROFILES" ] || fatal "BT_PROFILES not set"
export PROFILES_CONF=$BT_PROFILES

if [ -n "$BT_PUBLISH" ]; then
    [ -n "$BT_PUBLISH_IMGS" ] || fatal "BT_PUBLISH_IMGS not set"
    [ -n "$BT_PUBLISH_META" ] || fatal "BT_PUBLISH_META not set"
    [ -n "$BT_PUBLISH_PROFILES" ] || fatal "BT_PUBLISH_PROFILES not set"
fi

isofile=turnkey-$appname-$BT_CUR_VERSION.iso
curname=turnkey-$appname-$BT_CUR_VERSION
newname=turnkey-$appname-$BT_NEW_VERSION
rootfs=$curname.rootfs
cdroot=$curname.cdroot

maintenance_patch=$BT/patches/maintenance-releases/$BT_NEW_VERSION
[ -d $maintenance_patch ] || fatal "$maintenance_patch not found"

maintenance_app_patch=$O/$newname.patch
[ -d $maintenance_app_patch ] && fatal "$maintenance_app_patch already exists"

$BT/bin/iso-download $appname $BT_CUR_VERSION $BT_ISOS
$BT/bin/iso-verify $appname $BT_CUR_VERSION $BT_ISOS

cd $O
tklpatch-extract-iso $BT_ISOS/$isofile

tklpatch-apply $rootfs $BT/patches/secupdates
tklpatch-apply $rootfs $maintenance_patch/common

$BT/bin/generate-app-patch $rootfs $maintenance_patch $maintenance_app_patch
tklpatch-apply $rootfs $maintenance_app_patch

$BT/bin/generate-manifest $rootfs > $O/$newname.manifest
cp $maintenance_app_patch/changelog $O/$newname.changelog

mkdir -p $O/$newname.tklbam
$BT/bin/generate-tklbam-profile $rootfs $O/$newname.tklbam

tklpatch-prepare-cdroot $rootfs $cdroot
TKLPATCH_ISOLABEL=$appname tklpatch-geniso $cdroot $O/$newname.iso

$BT/bin/generate-signature $O/$newname.iso

# hardlink iso and sig to isos (followup builds)
ln $O/$newname.iso $BT_ISOS/
ln $O/$newname.iso.sig $BT_ISOS/

# only publish if specifically set
if [ -n "$BT_PUBLISH" ]; then
    export PUBLISH_DEST=$BT_PUBLISH_IMGS
    $BT/bin/publish-release $O/$newname.iso

    export PUBLISH_DEST=$BT_PUBLISH_META
    $BT/bin/publish-release $O/$newname.{changelog,manifest,iso.sig}

    export PUBLISH_DEST=$BT_PUBLISH_PROFILES
    $BT/bin/publish-files $O/$newname.tklbam/*.tar.gz
fi

# cleanup unless BT_DEBUG
if [ -z "$BT_DEBUG" ] && ! (mount | grep -q $(basename $rootfs)); then
    rm -rf $rootfs
    rm -rf $cdroot
fi

